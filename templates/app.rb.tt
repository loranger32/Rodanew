require_relative "db/db"

Dir["helpers/*.rb"].each { require_relative _1 }
Dir["jobs/*.rb"].each { require_relative _1 }

class <%= name.capitalize %> < Roda
  opts[:root] = File.dirname(__FILE__)

  # General plugins
  plugin :environments
  unless test?
    plugin :enhanced_logger,
      filter: ->(path) { path.start_with?("/assets") },
      trace_missed: true
  end

  include AppHelpers
  include ViewHelpers

  # Security
  secret = ENV["SESSION_SECRET"]
  plugin :sessions, key: "<%= name %>_app.session", secret: secret
  plugin :route_csrf
<% if rodauth? %>
  plugin :rodauth do
    enable :login, :logout, :create_account, :change_login, :change_password,
      :change_password_notify, :close_account, :active_sessions, :audit_logging,
      :reset_password, :reset_password_notify, :verify_account,
      :verify_account_grace_period, :lockout, :verify_login_change, :otp, :recovery_codes,
      :internal_request

    # Base
    account_password_hash_column :password_hash
    hmac_secret secret
    title_instance_variable :@page_title
    login_label "Email"
    if <%= name.capitalize %>.production?
      domain ENV["DOMAIN"]
    elsif <%= name.capitalize %>.development?
      domain "localhost"
    elsif <%= name.capitalize %>.test?
      domain "www.example.com"
    end

    # Email Base
    email_from "<%= name %>@example.com"
    email_subject_prefix "<%= name %> - "
    send_email { |mail| SendEmailInProductionJob.perform_async(mail) } if <%= name.capitalize %>.production?

    # Login Password Requirements Base
    password_hash_cost(<%= name.capitalize %>.test? ? 2 : 12)

    # Create Account
    create_account_additional_form_tags { scope.render("rodauth/create_account_aft") }
    before_create_account do
      unless (user_name = param_or_nil("user_name"))
        throw_error_status(422, "user_name", "must be present")
      end
      unless user_name.length > 2
        throw_error_status(422, "user_name", "must have at least 3 characters")
      end
      account[:user_name] = user_name
    end

    after_create_account do
      mail = Mail.new do
        from "<%= name %>@example.com"
        to ENV["MY_EMAIL"]
        subject "<%= name %> - New User Signed Up"
        body "A new user signed up"
      end

      if <%= name.capitalize %>.production?
        SendEmailInProductionJob.perform_async(mail)
      else
        mail.deliver!
      end
    end

    # Login
    login_redirect "/"
    after_login { TruncateAuditLogsJob.perform_async(account[:id]) }

    # Logout
    logout_redirect "/"

    # Change Login
    change_login_additional_form_tags { scope.render("rodauth/change_login_aft", locals: {current_email: account[:email]}) }
    change_login_button "Change Email"

    # Change Password
    change_password_additional_form_tags { scope.render("rodauth/change_password_aft") }

    # Active Session
    session_inactivity_deadline 216000 # 60 hours

    # Audit Logging
    audit_log_metadata_default do
      {"ip" => scope.request.ip}
    end

    # Lockout
    max_invalid_logins 10
    unlock_account_email_body { scope.render "mails/unlock-account-email" }

    # Verify Login Change
    verify_login_change_button "Verify Email Change"
    change_login_needs_verification_notice_flash "An email has been sent to your new email verify it"
    verify_login_change_notice_flash "Your new email has been verified"
    verify_login_change_email_body do
      scope.render "mails/verify-email-change-email",
        locals: {old_email: account[:email], new_email: verify_login_change_new_login}
    end

    # Reset Password
    reset_password_additional_form_tags { scope.render("rodauth/reset_password_aft") }
    reset_password_email_subject "Reset Password Link"
    reset_password_email_body { scope.render "mails/reset-password-email" }
    reset_password_email_sent_notice_flash "An Email has been sent to reset your password"
    reset_password_autologin? true

    # Reset Password Notify
    reset_password_notify_email_subject "Your Password has been reset"
    reset_password_notify_email_body { scope.render "mails/reset-password-notify-email" }

    # Change Password Notify
    password_changed_email_subject { "Password Modified" }
    password_changed_email_body { scope.render "mails/change-password-notify" }

    # Verify Account
    verify_account_email_sent_notice_flash "An email has been sent to you to verify your account"
    verify_account_email_subject "Verify your account"
    verify_account_email_body { scope.render "mails/verify-account-email", locals: {rodauth: self} }

    # Two Factor Base Setup
    two_factor_disable_button "Remove 2FA"
    two_factor_need_authentication_error_flash nil
    two_factor_disable_additional_form_tags { scope.render("rodauth/multifactor_disable_aft") }

    # Recovery Codes Setup
    auto_add_recovery_codes? true
    auto_remove_recovery_codes? true

    internal_request_configuration do
      if <%= name.capitalize %>.production?
        domain ENV["DOMAIN"]
      elsif <%= name.capitalize %>.development?
        domain "localhost:9292"
      elsif <%= name.capitalize %>.test?
        domain "www.example.com"
      end
    end
  end
<% end %>
  plugin :default_headers,
    "Strict-Transport-Security" => "max-age=63072000; includeSubDomains",
    "X-Content-Type-Options" => "nosniff",
    "X-Frame-Options" => "deny",
    "X-XSS-Protection" => "1; mode=block"

  plugin :content_security_policy do |csp|
    csp.default_src :none
    csp.font_src :self, "fonts.gstatic.com"
    csp.img_src :self<%= ", \"data:\" # data: is required for Bootstrap 5 svg inline icons" if rodauth? %>
    csp.object_src :none
    csp.frame_src :self
    csp.style_src :self, "fonts.googleapis.com"<%= ", \"stackpath.bootstrapcdn.com\", \"cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"" if bootstrap? %>
    csp.form_action :self
    csp.script_src :self<%= ", \"cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\"" if bootstrap? %>
    csp.connect_src :self
    csp.base_uri :none
    csp.frame_ancestors :none
    csp.block_all_mixed_content
  end

  # Routing
  plugin :hash_routes
  Dir["routes/*.rb"].each { require_relative _1 }

  plugin :status_handler

  status_handler(400) do
    view "error_pages/error_400"
  end

  status_handler(404) do
    view "error_pages/error_404"
  end

  status_handler(403) do
    view "error_pages/error_403"
  end

  # Rendering
  plugin :render, engine: "haml", template_opts: {escape_html: true}
  plugin :partials
  plugin :assets,
    css: %w[style.css],
    js: {main: "main.js"<%= ", recovery_codes: \"recovery_codes.js\"" if rodauth? %><%= ", bs_tooltip: \"bs_tooltip.js\"" if bootstrap? %>},
    group_subdirs: false,
    gzip: true,
    timestamp_paths: true
  compile_assets if production?
  plugin :public, gzip: true
  plugin :flash
  plugin :content_for

  # Request / response
  plugin :typecast_params
  alias_method :tp, :typecast_params
<% if rodauth? %>
  Mail.defaults { delivery_method :smtp, address: "localhost", port: 1025 } if development?
  Mail.defaults { delivery_method :test } if test?
<% end %>
  route do |r|
    r.public
    r.assets unless <%= name.capitalize %>.production?

    r.root do
      view "home"
    end

    check_csrf!
<% if rodauth? %>
    r.rodauth
    rodauth.check_active_session
    rodauth.require_authentication
    @account_ds = rodauth.account_from_session
<% end %>
    r.hash_branches
<% if rodauth? %>
    r.is "change-user-name" do
      r.get do
        view "change_user_name"
      end

      r.post do
        account = Account[@account_ds[:id]]
        account.set(user_name: h(tp.str("user_name")))
        if account.valid?
          account.save
          flash["notice"] = "User Name successfully changed"
          r.redirect "/"
        else
          flash["error"] = format_flash_error(account)
          r.redirect
        end
      end
    end

    r.get "security-log" do
      current_page = tp.pos_int("page", 1)

      @security_logs = DB[:account_authentication_audit_logs]
        .where(account_id: @account_ds[:id])
        .reverse(:id)
        .extension(:pagination)
        .paginate(current_page, 30)

      view "security_log"
    end

    r.get "account" do
      @account = Account[@account_ds[:id]]
      view "account"
    end
<% end %>
  end
end
